/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package com.ivyft.kafka.yarn.protocol;

@SuppressWarnings("all")
/** Kafka Yarn Interface */
@org.apache.avro.specific.AvroGenerated
public interface KafkaYarnProtocol {
  public static final org.apache.avro.Protocol PROTOCOL = org.apache.avro.Protocol.parse("{\"protocol\":\"KafkaYarnProtocol\",\"namespace\":\"com.ivyft.kafka.yarn.protocol\",\"doc\":\"Kafka Yarn Interface\",\"types\":[{\"type\":\"record\",\"name\":\"NodeContainer\",\"fields\":[{\"name\":\"nodeHost\",\"type\":\"string\",\"doc\":\"Container 运行的 Host\"},{\"name\":\"nodePort\",\"type\":\"int\",\"doc\":\"Container RPC port\"},{\"name\":\"containerId\",\"type\":\"string\",\"doc\":\"Yarn 分配的 Container Id\"},{\"name\":\"nodeHttpAddress\",\"type\":\"string\",\"doc\":\"Kafka ApplicationMaster Tracker URI\"}]},{\"type\":\"enum\",\"name\":\"IdType\",\"symbols\":[\"CONTAINER_ID\",\"NODE_ID\"]}],\"messages\":{\"listInstance\":{\"doc\":\"List Kafka Instance\",\"request\":[],\"response\":{\"type\":\"array\",\"items\":\"NodeContainer\"}},\"addInstance\":{\"doc\":\"添加启动 Kafka Instance, 默认为1, 可以启动多个\",\"request\":[{\"name\":\"memory\",\"type\":\"int\"},{\"name\":\"cores\",\"type\":\"int\"},{\"name\":\"jettyZip\",\"type\":\"string\"}],\"response\":\"null\"},\"stopInstance\":{\"doc\":\"停止 Kafka Instance\",\"request\":[{\"name\":\"id\",\"type\":\"string\"},{\"name\":\"idType\",\"type\":\"IdType\"}],\"response\":\"null\"},\"stopAll\":{\"doc\":\"停止所有的 Kafka Instance\",\"request\":[],\"response\":\"null\"},\"shutdown\":{\"doc\":\"停止 Kafka On Yarn 集群\",\"request\":[],\"response\":\"null\"}}}");
  /** List Kafka Instance */
  java.util.List<com.ivyft.kafka.yarn.protocol.NodeContainer> listInstance() throws org.apache.avro.AvroRemoteException;
  /** 添加启动 Kafka Instance, 默认为1, 可以启动多个 */
  java.lang.Void addInstance(int memory, int cores, java.lang.CharSequence jettyZip) throws org.apache.avro.AvroRemoteException;
  /** 停止 Kafka Instance */
  java.lang.Void stopInstance(java.lang.CharSequence id, com.ivyft.kafka.yarn.protocol.IdType idType) throws org.apache.avro.AvroRemoteException;
  /** 停止所有的 Kafka Instance */
  java.lang.Void stopAll() throws org.apache.avro.AvroRemoteException;
  /** 停止 Kafka On Yarn 集群 */
  java.lang.Void shutdown() throws org.apache.avro.AvroRemoteException;

  @SuppressWarnings("all")
  /** Kafka Yarn Interface */
  public interface Callback extends KafkaYarnProtocol {
    public static final org.apache.avro.Protocol PROTOCOL = com.ivyft.kafka.yarn.protocol.KafkaYarnProtocol.PROTOCOL;
    /** List Kafka Instance */
    void listInstance(org.apache.avro.ipc.Callback<java.util.List<com.ivyft.kafka.yarn.protocol.NodeContainer>> callback) throws java.io.IOException;
    /** 添加启动 Kafka Instance, 默认为1, 可以启动多个 */
    void addInstance(int memory, int cores, java.lang.CharSequence jettyZip, org.apache.avro.ipc.Callback<java.lang.Void> callback) throws java.io.IOException;
    /** 停止 Kafka Instance */
    void stopInstance(java.lang.CharSequence id, com.ivyft.kafka.yarn.protocol.IdType idType, org.apache.avro.ipc.Callback<java.lang.Void> callback) throws java.io.IOException;
    /** 停止所有的 Kafka Instance */
    void stopAll(org.apache.avro.ipc.Callback<java.lang.Void> callback) throws java.io.IOException;
    /** 停止 Kafka On Yarn 集群 */
    void shutdown(org.apache.avro.ipc.Callback<java.lang.Void> callback) throws java.io.IOException;
  }
}